from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from OpenGL.GL.ARB.shader_objects import *
from OpenGL.GL.ARB.vertex_shader import *
from OpenGL.GL.ARB.fragment_shader import *
from OpenGL.GL.ARB.multitexture import *
from OpenGL.arrays import vbo
from OpenGL.arrays import ArrayDatatype as adt
from OpenGL.GL.ARB.vertex_buffer_object import *
from OpenGL.GL.ARB.framebuffer_object import *
from OpenGL.GL.EXT.framebuffer_object import *
from time import *
import Image
import freenect
import numpy as np
from shaderProg01 import *

tview = 0
#t = [0,1,2,3,4]
sllg, slrlg = 0.05, 0.04
slh, slb = 1,-1
slz,slrz = 0.2,0.22
slx = [-1.1, -1.0, -0.9, -0.8, 0.4, 0.6, 0.7, 0.9, 1.0, 1.1, -0.6, -0.5, -0.4, -0.3, -0.1, 0.0, 0.1, 0.2]
nbslid = len(slx)
sld = []
slrd = []
slbv = []
slrbv = []
ratioK = 0.75
ratioT = 0.8
knmin,knmax = 50,900
scaletex = 0.75
nbtex = 1
erodew = erodeh = 0.0
text = "0.0"
#shrad = np.array([[1.0, 0.0],[0.0,1.0]],'f')
#shfrq =  np.array([[1.0, 0.0],[0.0,1.0]],'f')
shdiv = [0,0,0,0,1,0,1,1]
shfrq = [1.0, 1.0]
glacttex = [GL_TEXTURE0_ARB, GL_TEXTURE1_ARB, GL_TEXTURE2_ARB, GL_TEXTURE3_ARB, GL_TEXTURE4_ARB,
            GL_TEXTURE5_ARB, GL_TEXTURE6_ARB, GL_TEXTURE7_ARB, GL_TEXTURE8_ARB, GL_TEXTURE9_ARB]

def init():
    global matvbo, gbv, gbt, fbv, fbt, knt, t, sld, slbv, sD, knmin, knmax, knminplus, matKn
    print "esc to quit"
    rep = os.getcwd()
    imtex = []
    for im in os.listdir('./Images/Grille'):
        if os.path.isfile('./Images/Grille/'+im):
            imtex.append(rep+'/Images/Grille/'+im)
    imtex.sort()
    t = range(len(imtex)+3)
    print imtex
    sD = range(18)
    glInitMultitextureARB()
    initShaders1( )
    initShaders2( )
    initShaders3( )
    for i in range(len(imtex)):
        im = Image.open(imtex[i]).convert("RGBA")
        actsize = im.size
        im = im.tostring("raw","RGBA",0,-1)
        glActiveTextureARB(glacttex[i+1])
        glBind2Dcol(im, t[i+1], actsize)
    propimage = actsize[1]/float(actsize[0])
    #print actsize[1], actsize[0], propimage
    im = Image.open("bleu.jpg").convert("RGBA")
    im = im.tostring("raw","RGBA",0,-1)
    glActiveTextureARB(glacttex[len(imtex)+1])
    glBind2Dcol(im, t[len(imtex)+1], (50,50))
    im = Image.open("rouge.jpg").convert("RGBA")
    im = im.tostring("raw","RGBA",0,-1)
    glActiveTextureARB(glacttex[len(imtex)+2])
    glBind2Dcol(im, t[len(imtex)+2], (50,50))
    fdata = open('dataSave.txt', 'r')
    f = fdata.readlines()
    slhr = range(nbslid)
    for i in range(nbslid):
        slhr[i]=sD[i]=f[i]
    sizedp[0]=4*int(((float(f[0])/2.0)+0.5)*200.0)
    sizedp[2]=4*int(((float(f[2])/2.0)+0.5)*200.0)
    sizedp[1]=int((float(f[1])+1.0)*300.0)
    sizedp[3]=int((float(f[3])+1.0)*300.0)
    scaletex=float(f[4])+1.0
    erode=float(f[5])
    knmin=int((float(f[7])+1.0)*2048.0)
    knminplus=int((float(f[8])+1.0)*200.0)
    knmax=knmin+knminplus
    maskv = np.array([[-1*scaletex,scaletex*propimage,0.1],
                                     [-1*scaletex,-1*scaletex*propimage,0.1],
                                     [scaletex,-1*scaletex*propimage,0.1],
                                     [scaletex,scaletex*propimage,0.1]],'f')
    matt = np.array([[0,1],[0,0],[1,0],[1,1]],'f')
    matKn = np.array([[0,1],[0,0],[1,0],[1,1]],'f')
    #matKn = np.array([[f[10],f[14]],[f[11],f[15]],[f[12],f[16]],[f[13],f[17]]],'f')
    for i in range(nbslid):
        slxv = slx[i]
        sld.append(np.array([[slxv-sllg,slh,slz],[slxv-sllg,slb,slz],[slxv+sllg,slb,slz],[slxv+sllg,slh,slz]],'f'))
        slrxv = slx[i]
        slrd.append(np.array([[slrxv-slrlg,slhr[i],slrz],[slrxv-slrlg,slb,slrz],[slrxv+slrlg,slb,slrz],[slrxv+slrlg,slhr[i],slrz]],'f'))
    gbv = glGenBuffersARB(1)
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, gbv)
    glBufferDataARB( GL_ARRAY_BUFFER_ARB, maskv, GL_STATIC_DRAW_ARB )
    gbt = glGenBuffersARB(1)
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, gbt)
    glBufferDataARB( GL_ARRAY_BUFFER_ARB, matt, GL_STATIC_DRAW_ARB )
    fbv = glGenBuffersARB(1)
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, fbv)
    glBufferDataARB( GL_ARRAY_BUFFER_ARB, maskv, GL_STATIC_DRAW_ARB )
    knt = glGenBuffersARB(1)
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
    glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
    for i in range(nbslid):
        slbv.append(glGenBuffersARB(1))
        glBindBufferARB(GL_ARRAY_BUFFER_ARB, slbv[i])
        glBufferDataARB( GL_ARRAY_BUFFER_ARB, sld[i], GL_STATIC_DRAW_ARB )
        slrbv.append(glGenBuffersARB(1))
        glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[i])
        glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[i], GL_STATIC_DRAW_ARB )
    glClearColor(0.5,0.0, 0.0, 1.0)
    glShadeModel(GL_SMOOTH)
    glMatrixMode( GL_PROJECTION )
    glLoadIdentity()
    gluOrtho2D( -1.5, 1.5, -1.5*ratioT, 1.5*ratioT)
    glMatrixMode( GL_MODELVIEW )

def initShaders1( ):
    global sPmask
    sPmask = ShaderProgram( )    
    sPmask.addShader( GL_VERTEX_SHADER_ARB, "mask03.vert" )
    sPmask.addShader( GL_FRAGMENT_SHADER_ARB, "mask04.frag" )
    sPmask.linkShaders( )

def initShaders2( ):
    global sPpass
    sPpass = ShaderProgram( )    
    sPpass.addShader( GL_VERTEX_SHADER_ARB, "pass03.vert" )
    sPpass.addShader( GL_FRAGMENT_SHADER_ARB, "pass03.frag" )
    sPpass.linkShaders( )

def initShaders3( ):
    global sPalpha
    sPalpha = ShaderProgram( )    
    sPalpha.addShader( GL_VERTEX_SHADER_ARB, "pass.vert" )
    sPalpha.addShader( GL_FRAGMENT_SHADER_ARB, "alpha.frag" )
    sPalpha.linkShaders( )

y = 1.0
x = y*1.333
z1 = 0.0
a = 0
aaa = 0
def display(*args):
    global t, aaa, shrad
    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT )
    glLoadIdentity()
    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE)
    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

    sPmask.enable()
    if tview == 0:
        glUniform1iARB(sPmask.indexOfUniformVariable("tex0"), t[1])
        glUniform1iARB(sPmask.indexOfUniformVariable("tex1"), t[0])
        #glUniformMatrix2fvARB(sPpass.indexOfUniformVariable("sca"),2,0, shrad)
        #glUniformMatrix2fvARB(sPpass.indexOfUniformVariable("off"),2,0, shfrq)
        #glUniform2fARB(sPpass.indexOfUniformVariable("origin"), shdiv[0], shdiv[1])
        #glUniform2fARB(sPpass.indexOfUniformVariable("mult"), shfrq[0], shfrq[1])
        #print shrad
        
    else:
        glUniform1iARB(sPmask.indexOfUniformVariable("tex0"), t[0])
        glUniform1iARB(sPmask.indexOfUniformVariable("tex1"), t[1])
        #glUniform4fARB(sPpass.indexOfUniformVariable("radius"), shrad[0],shrad[1])
        #glUniformMatrix2fvARB(sPpass.indexOfUniformVariable("origin"),2,0, shrad)
        #glUniformMatrix2fvARB(sPpass.indexOfUniformVariable("offset"),2,0, shfrq)
        #glUniform1fARB(sPpass.indexOfUniformVariable("width"), erodew)
        #glUniform1fARB(sPpass.indexOfUniformVariable("height"), erodeh)

    rang = 2.0
    texr = float(1.0/(rang))
    rangv = 2.0/rang
    glBegin(GL_QUAD_STRIP)
    for i in range(int(rang+1)):
        #print texr, texr*i
        '''glMultiTexCoord2fARB( glacttex[1], shdiv[0], shdiv[1] )
        glMultiTexCoord2fARB( glacttex[0], (i/rang), 1 )
        glVertex3f(-1.0+(1/rangv*i), 1.0, 0.0)
        glMultiTexCoord2fARB( glacttex[1], (i/rang)+(shdiv[2]), shdiv[3] )
        glMultiTexCoord2fARB( glacttex[0], (i/rang), 0 )
        glVertex3f(-1.0+(1/rangv*i), -1.0, 0.0)
        glMultiTexCoord2fARB( glacttex[1], shdiv[4], shdiv[5] )
        glMultiTexCoord2fARB( glacttex[0], (i+1)/rang, 0 )
        glVertex3f(-1.0+(1/rangv*(i+1)), -1.0, 0.0)
        glMultiTexCoord2fARB( glacttex[1], shdiv[6], shdiv[7])
        glMultiTexCoord2fARB( glacttex[0], (i+1)/rang, 1 )
        glVertex3f(-1.0+(1/rangv*(i+1)), 1.0, 0.0)'''
        glMultiTexCoord2fARB( glacttex[1], shdiv[0]+(texr*shdiv[2]*i), 1 )
        glMultiTexCoord2fARB( glacttex[0], 0+(i*texr), 1 )
        glVertex3f(-1.0+i*rangv, 1.0, 0.0)
        glMultiTexCoord2fARB( glacttex[1], shdiv[1]+(texr*shdiv[3]*i), 0 )
        glMultiTexCoord2fARB( glacttex[0], 0+(i*texr), 0 )
        glVertex3f(-1.0+i*rangv, -1.0, 0.0)
        
    
        '''glMultiTexCoord2fARB( glacttex[1], shdiv[6], 1 )
        glMultiTexCoord2fARB( glacttex[0], 0, 1 )
        glVertex3f(-1.0, 1.0, 0.0)'''
        
    glEnd(  )

    '''glBegin(GL_QUADS)
    glMultiTexCoord2fARB( glacttex[1], shdiv[0], shdiv[1] )
    glMultiTexCoord2fARB( glacttex[0], 1, 1 )
    glVertex3f(-1.0, 1.0, 0.0)
    glMultiTexCoord2fARB( glacttex[1], shdiv[2], shdiv[3] )
    glMultiTexCoord2fARB( glacttex[0], 1, 0 )
    glVertex3f(-1.0, -1.0, 0.0)
    glMultiTexCoord2fARB( glacttex[1], shdiv[4], shdiv[5] )
    glMultiTexCoord2fARB( glacttex[0], 0, 0)
    glVertex3f(1.0, -1.0, 0.0)
    glMultiTexCoord2fARB( glacttex[1], shdiv[6], shdiv[7] )
    glMultiTexCoord2fARB( glacttex[0], 0, 1 )
    glVertex3f(1.0, 1.0, 0.0)
    glEnd(  )'''
    
    '''glEnableClientState(GL_VERTEX_ARRAY)
    glEnableClientState(GL_TEXTURE_COORD_ARRAY)
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, fbv)
    glVertexPointer( 3, GL_FLOAT, 0, None )
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
    glTexCoordPointer( 2, GL_FLOAT, 0, None)
    glDrawArrays(GL_QUADS, 0, 4)
    glDisableClientState(GL_VERTEX_ARRAY)
    glDisableClientState(GL_TEXTURE_COORD_ARRAY)'''
    
    sPmask.disable()

    '''if tview == 0:
        sPmask.enable()
        glUniform1iARB(sPmask.indexOfUniformVariable("tex0"), t[nbtex])
        glUniform1iARB(sPmask.indexOfUniformVariable("tex1"), t[0])
        glEnableClientState(GL_VERTEX_ARRAY)
        glEnableClientState(GL_TEXTURE_COORD_ARRAY)
        glBindBufferARB(GL_ARRAY_BUFFER_ARB, gbv)
        glVertexPointer( 3, GL_FLOAT, 0, None )
        glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
        glTexCoordPointer( 2, GL_FLOAT, 0, None)
        glDrawArrays(GL_QUADS, 0, 4)
        glDisableClientState(GL_VERTEX_ARRAY)
        glDisableClientState(GL_TEXTURE_COORD_ARRAY)
        sPmask.disable()
    else:'''
    '''if tview == 0 or tview == 2:
        sPalpha.enable()
        for i in range(nbslid):
            glUniform1iARB(sPalpha.indexOfUniformVariable("tex0"), t[5])
            glEnableClientState(GL_VERTEX_ARRAY)
            glEnableClientState(GL_TEXTURE_COORD_ARRAY)
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slbv[i])
            glVertexPointer( 3, GL_FLOAT, 0, None )
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, gbt)
            glTexCoordPointer( 2, GL_FLOAT, 0, None)
            glDrawArrays(GL_QUADS, 0, 4)
            glDisableClientState(GL_VERTEX_ARRAY)
            glDisableClientState(GL_TEXTURE_COORD_ARRAY)

            glUniform1iARB(sPalpha.indexOfUniformVariable("tex0"), t[6])
            glEnableClientState(GL_VERTEX_ARRAY)
            glEnableClientState(GL_TEXTURE_COORD_ARRAY)
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[i])
            glVertexPointer( 3, GL_FLOAT, 0, None )
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, gbt)
            glTexCoordPointer( 2, GL_FLOAT, 0, None)
            glDrawArrays(GL_QUADS, 0, 4)
            glDisableClientState(GL_VERTEX_ARRAY)
            glDisableClientState(GL_TEXTURE_COORD_ARRAY)
        sPalpha.disable()'''

    aaa = time()-aaa
    aab = str(aaa)
    aaa = time()
    text1 = aab
    #print aab, aaa
    if tview == 0 : glColor3f( 0.1, 0.1, 0.3 )
    if tview == 1 : glColor3f( 0.7, 0.7, 0.3 )
    glRasterPos3f( 0.2, 0.2, 0.2 )
    for c in str(text):
        glutBitmapCharacter( GLUT_BITMAP_TIMES_ROMAN_24, ord(c) )
    glBindBufferARB(GL_ARRAY_BUFFER_ARB, 0)
    glutSwapBuffers (  )
    sleep (1/30.0)

def glBind2Dlum(im,idt, size):
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, idt)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, size[0], size[1], 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, im)
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP )
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP )
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR )
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR )

def glBind2Dcol(im,idt, size):
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, idt)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, size[0], size[1], 0, GL_RGBA, GL_UNSIGNED_BYTE, im)
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE )
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE )
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR )
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR )
    
dpxmin = 0
dpxmax = 600
dpymin = 0
dpymax = 600
sizedp = [0,0,800,600]
def DepthGet():
    global text
    knlen = knmax-knmin
    #print knlen
    #if knlen==0:knlen=1
    depth1, timestamp = freenect.sync_get_depth()
    depth1 = depth1[sizedp[1]:sizedp[3],sizedp[0]:sizedp[2]]
    dpxsz = sizedp[2]-sizedp[0]
    dpysz = sizedp[3]-sizedp[1]
    np.resize(depth1,(dpysz,dpxsz))
    dpmin = depth1.min()
    #dpmax = depth1.max()
    dmin = depth1>=knmin
    dmax = depth1<=knmax
    dmult = np.logical_and(dmin, dmax)
    if tview==0:depth = 255*dmax
    if tview==1:depth = 255*dmult
    dmask = knmax-depth1
    #text = str(np.count_nonzero(dmult))
    np.clip(dmask, 1, knlen-1, out=dmask)
    level = dmask.min()
    npEqual = np.equal(dmask, level)
    #text = str(np.count_nonzero(npEqual))
    depth = depth.flatten()
    return depth, (dpxsz,dpysz), knlen, level

def animationStep( *args ):
    global t, nbtex
    kn, newsize, lenkn, level = DepthGet()
    #print level, lenkn
    if lenkn!=0:nbtex=(int((2.0/lenkn)*level))+2
    #print nbtex
    glActiveTextureARB(glacttex[0])
    glBind2Dlum(kn, t[0], newsize)
    #sleep (1/30.0)
    glutPostRedisplay( )

def souris(but, sta, x , y):
    global onsl
    onsl = -1
    gly = -1.0*(y*(3*ratioK/600.0)-(1.5*ratioK))
    glx = x*(3/800.0)-1.5
    if gly>=slb and gly<=slh:
        for i in range(nbslid):
            if glx>=sld[i][0][0] and glx<=sld[i][3][0]:
                onsl = i
                #print i

knminplus = 0
def sel(x, y):
    global slgly, knmin, knmax, knminplus, erodew, erodeh, shrad, shfrq, text
    gly = -1.0*(y*(3*ratioK/600.0)-(1.5*ratioK))
    glx = x*(3/800.0)-1.5
    if onsl!=-1:
        slrd[onsl][0][1] = gly
        slrd[onsl][3][1] = gly
        if onsl==0:
            szgly = 4*int(((gly/2.0)+0.5)*200.0)
            if szgly<sizedp[2] and szgly>=0:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                sizedp[0]=szgly
                saveData(0, gly)
        if onsl==2:
            szgly = 4*int(((gly/2.0)+0.5)*200.0)
            if szgly>sizedp[0] and szgly<=640:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                sizedp[2]=szgly
                saveData(2, gly)
        if onsl==1:
            szgly = int((gly+1.0)*300.0)
            if szgly<sizedp[3] and szgly>=0:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                sizedp[1]=szgly
                saveData(1, gly)
        if onsl==3:
            szgly = int((gly+1.0)*300.0)
            if szgly>sizedp[1] and szgly<=480:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                sizedp[3]=szgly
                saveData(3, gly)
        if onsl==4:
            szgly = int((gly+1.0)*2048.0)
            if szgly>0:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                scaletex = gly+1.0
                #print scaletex, gbv
                maskv = np.array([[-1*scaletex,scaletex*ratioT,0.1],
                                     [-1*scaletex,-1*scaletex*ratioT,0.1],
                                     [scaletex,-1*scaletex*ratioT,0.1],
                                     [scaletex,scaletex*ratioT,0.1]],'f')
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, fbv)
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, maskv, GL_STATIC_DRAW_ARB )
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, gbv)
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, maskv, GL_STATIC_DRAW_ARB )
                #knmin=szgly
                #knmax = knmin+knminplus
                saveData(4, gly)
        if onsl==5:
            #szgly = int((gly+1.0)*2048.0)
            #if gly>10:
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            erodew = gly*0.1
            saveData(5, gly)
        if onsl==6:
            #szgly = int((gly+1.0)*2048.0)
            #if gly>10:
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            erodeh = gly*0.1
            saveData(6, gly)
        if onsl==7:
            szgly = int((gly+1.0)*2048.0)
            if szgly>0:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                knmin = szgly
                knmax = knmin+knminplus
                saveData(7, gly)
        if onsl==8:
            szgly = int((gly+1.0)*200.0)
            if  knmin+szgly<2048 and szgly>0:
                glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
                glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
                knminplus = szgly
                knmax=knmin+knminplus
                saveData(8, gly)
        if onsl==10:           
            shdiv[0] = text = (gly+0.0)*3.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==11:           
            shdiv[1] = text =  (gly+0.0)*3.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==12:           
            shdiv[2] = text =  (gly+0.0)*3.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==13:           
            shdiv[3] = text =  (gly+0.0)*3.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==14:           
            shdiv[4] = text =  (gly+0.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==15:           
            shdiv[5] = text =  (gly+0.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==16:           
            shdiv[6] = text =  (gly+0.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        if onsl==17:           
            shdiv[7] = text =  (gly+0.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
        '''if onsl==10:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[0][0] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(10, gly)
        if onsl==11:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[1][0] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(11, gly)
        if onsl==12:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[2][0] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(12, gly)
        if onsl==13:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[3][0] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(13, gly)
        if onsl==14:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[0][1] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(14, gly)
        if onsl==15:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[1][1] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(15, gly)
        if onsl==16:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[2][1] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(16, gly)
        if onsl==17:
            szgly = (gly+1.0)*1.0
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, slrbv[onsl])
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, slrd[onsl], GL_STATIC_DRAW_ARB )
            matKn[3][1] = szgly
            glBindBufferARB(GL_ARRAY_BUFFER_ARB, knt)
            glBufferDataARB( GL_ARRAY_BUFFER_ARB, matKn, GL_STATIC_DRAW_ARB )
            saveData(17, gly)'''
        #print "yo", szgly, knmin, knmax, knminplus

def saveData(i, nsave):
    sD[i] = str(nsave)+"\n"

def keyPressed(*args):
    global scen, tview
    print args[0]
    if args[0] == '\x1b':
        sData = open('dataSave.txt', 'w')
        for i in range(len(sD)):
            sData.write(str(sD[i]))
        sData.close()
        glDeleteTextures(3)
        sys.exit()
    if args[0] == 'a':
        if tview==1:tview=0
        else:tview=1

def ReSizeGLScene(Width, Height):
    if Height == 0:						
        Height = 1
    f = Height/float(Width)
    glViewport(0, 0, Width, Height)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()	
    gluOrtho2D( -1.5, 1.5, -1.5*f, 1.5*f)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    
def main():
    glutInit(  )
    glutInitDisplayMode( GLUT_DOUBLE)
    glutInitWindowSize( 800,600 )
    glutInitWindowPosition( 400, 100 )
    glutCreateWindow("Yo")    
    glutDisplayFunc( display )
    glutReshapeFunc(ReSizeGLScene)
    glutIdleFunc( animationStep )
    glutMouseFunc(souris)
    glutMotionFunc(sel)
    glutKeyboardFunc(keyPressed)
    init()    
    glutMainLoop( )

if __name__ == "__main__":
    main()
